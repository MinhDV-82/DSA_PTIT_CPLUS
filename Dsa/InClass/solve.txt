#include <bits/stdc++.h>
using namespace std;
#define FOR(a, b, i) for (int i = a; i <= b; i++)
#define FORR(b, a, i) for (int i = b; i >= a; i--)
#define ll long long
#define f first
#define s second
#define sp                         \
    ios_base ::sync_with_stdio(0); \
    cin.tie(0);                    \
    cout.tie(0)
#define mainCode int main()

int const NMAX = 1e6 + 5;
int a[NMAX];
int n, k;

class Student
{
public:
    string id;
    string name;
    float score;

    Student(string id, string name, float score)
    {
        this->id = id;
        this->name = name;
        this->score = score;
    }

    static int binarySearch(vector<Student> &arr, int l, int r, float x)
    {
        while (l <= r)
        {
            int mid = l + (r - l) / 2;
            if (arr[mid].score == x)
                return mid;
            else if (arr[mid].score < x)
                l = mid + 1;
            else
                r = mid - 1;
        }
        return -1;
    };

    static int linearSearch(vector<Student> &arr, int l, int r, float x)
    {
        for (int i = l; i <= r; i++)
        {
            if (arr[i].score == x)
                return i;
        }
        return -1;
    }

    static int ternarySearch(vector<Student> &arr, int l, int r, float x)
    {
        while (l <= r)
        {
            int mid1 = l + (r - l) / 3;
            int mid2 = r - (r - l) / 3;

            if (arr[mid1].score == x)
                return mid1;
            if (arr[mid2].score == x)
                return mid2;
            if (x < arr[mid1].score)
                r = mid1 - 1;
            else if (x > arr[mid2].score)
                l = mid2 + 1;
            else
            {
                l = mid1 + 1;
                r = mid2 - 1;
            }
        }

        return -1;
    }

    static bool cmp(Student &a, Student &b)
    {
        return a.score < b.score;
    }

    void OutInfo()
    {
        cout << this->id << " " << this->name << " " << this->score << "\n";
    }
};

vector<Student> students;
void solve()
{
    int n;
    cin >> n;
    FOR(0, n - 1, i)
    {
        string id;
        string name;
        float score;
        cin >> id >> name >> score;
        students.push_back(Student(id, name, score));
    }
    sort(students.begin(), students.end(), Student::cmp);

    int q;
    float score;
    cin >> q;
    while (q--)
    {
        cin >> score;
        cout << "Searching for score = " << score << "\n";

        int idx1 = Student::binarySearch(students, 0, n - 1, score);
        int idx2 = Student::linearSearch(students, 0, n - 1, score);
        int idx3 = Student::ternarySearch(students, 0, n - 1, score);

        if (idx1 != -1)
        {
            cout << "Binary Search -> Found student: ";
            students[idx1].OutInfo();
        }
        else
            cout << "Binary Search -> Student not found\n";

        if (idx2 != -1)
        {
            cout << "Linear Search -> Found student: ";
            students[idx2].OutInfo();
        }
        else
            cout << "Linear Search -> Student not found\n";

        if (idx3 != -1)
        {
            cout << "Ternary Search -> Found student: ";
            students[idx3].OutInfo();
        }
        else
            cout << "Ternary Search -> Student not found\n";
        cout << "=======================\n";
    }
}

mainCode
{
    sp;
    solve();
}